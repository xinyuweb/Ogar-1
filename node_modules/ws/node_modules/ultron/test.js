describe("Ultron", function() {
 "use strict";
 var e, n, o = require("eventemitter3"),
  s = require("events").EventEmitter,
  t = require("assume"),
  i = require("./");
 beforeEach(function() {
  n = new o, e = new i(n)
 }), afterEach(function() {
  e.destroy(), n.removeAllListeners()
 }), it("is exposed as a function", function() {
  t(i).is.a("function")
 }), it("can be initialized without the new keyword", function() {
  t(i(n)).is.instanceOf(i)
 }), it("assigns a unique id to every instance", function() {
  for (var n = 0; 100 > n; n++) t(e.id).does.not.equal((new i).id)
 }), it("allows removal through the event emitter", function() {
  function o() {}

  function s() {}
  e.on("foo", o), e.once("foo", s), t(o.__ultron).equals(e.id), t(s.__ultron).equals(e.id), t(n.listeners("foo").length).equals(2), n.removeListener("foo", o), t(n.listeners("foo").length).equals(1), n.removeListener("foo", s), t(n.listeners("foo").length).equals(0)
 }), describe("#on", function() {
  it("assigns a listener", function() {
   function o() {}
   t(n.listeners("foo").length).equals(0), e.on("foo", o), t(n.listeners("foo").length).equals(1), t(n.listeners("foo")[0]).equals(o)
  }), it("tags the assigned function", function() {
   t(n.listeners("foo").length).equals(0), e.on("foo", function() {}), t(n.listeners("foo")[0].__ultron).equals(e.id)
  }), it("also passes in the context", function(o) {
   var s = 1313;
   e.on("foo", function(e, n, i) {
    t(e).equals("a"), t(n).equals("b"), t(i).equals("c"), t(this).equals(s), o()
   }, s), n.emit("foo", "a", "b", "c")
  }), it("works with regular eventemitters as well", function(e) {
   var n = new s,
    o = new i(n);
   o.on("foo", function(n, o, s) {
    t(n).equals("a"), t(o).equals("b"), t(s).equals("c"), e()
   }), n.emit("foo", "a", "b", "c")
  })
 }), describe("#once", function() {
  it("assigns a listener", function() {
   function o() {}
   t(n.listeners("foo").length).equals(0), e.once("foo", o), t(n.listeners("foo").length).equals(1), t(n.listeners("foo")[0]).equals(o)
  }), it("tags the assigned function", function() {
   t(n.listeners("foo").length).equals(0), e.once("foo", function() {}), t(n.listeners("foo")[0].__ultron).equals(e.id)
  }), it("also passes in the context", function(o) {
   var s = 1313;
   e.once("foo", function(e, n, i) {
    t(e).equals("a"), t(n).equals("b"), t(i).equals("c"), t(this).equals(s), o()
   }, s), n.emit("foo", "a", "b", "c"), n.emit("foo", "a", "b", "c")
  }), it("works with regular eventemitters as well", function(e) {
   var n = new s,
    o = new i(n);
   o.once("foo", function(n, o, s) {
    t(n).equals("a"), t(o).equals("b"), t(s).equals("c"), e()
   }), n.emit("foo", "a", "b", "c"), n.emit("foo", "a", "b", "c")
  })
 }), describe("#remove", function() {
  it("removes only our assigned `on` listeners", function() {
   function o() {}

   function s() {}
   n.on("foo", o), e.on("foo", s), t(n.listeners("foo").length).equals(2), e.remove("foo"), t(n.listeners("foo").length).equals(1), t(n.listeners("foo")[0]).equals(o)
  }), it("removes our private __ultron references", function() {
   function o() {}

   function l() {}
   t("__ultron" in o).is["false"](), t("__ultron" in l).is["false"](), e.on("foo", l), e.once("bar", o), t("__ultron" in o).is["true"](), t("__ultron" in l).is["true"](), e.remove("foo, bar"), t("__ultron" in o).is["false"](), t("__ultron" in l).is["false"](), e.destroy(), n = new s, e = new i(n), t("__ultron" in o).is["false"](), t("__ultron" in l).is["false"](), e.on("foo", l), e.once("bar", o), t("__ultron" in o).is["true"](), t("__ultron" in l).is["true"](), e.remove("foo, bar"), t("__ultron" in o).is["false"](), t("__ultron" in l).is["false"]()
  }), it("removes only our assigned `once` listeners", function() {
   function o() {}

   function s() {}
   n.once("foo", o), e.once("foo", s), t(n.listeners("foo").length).equals(2), e.remove("foo"), t(n.listeners("foo").length).equals(1), t(n.listeners("foo")[0]).equals(o)
  }), it("removes only our assigned `once` listeners from regular EE", function() {
   function e() {}

   function n() {}
   var o = new s,
    l = new i(o);
   o.once("foo", e), l.once("foo", n), t(o.listeners("foo").length).equals(2), l.remove("foo"), t(o.listeners("foo").length).equals(1), t(o.listeners("foo")[0].listener).equals(e)
  }), it("removes all assigned events if called without args", function() {
   function o() {}

   function s() {}
   e.on("foo", o), e.on("bar", s), t(n.listeners("foo").length).equals(1), t(n.listeners("bar").length).equals(1), e.remove(), t(n.listeners("foo").length).equals(0), t(n.listeners("bar").length).equals(0)
  }), it("removes multiple listeners based on args", function() {
   function o() {}

   function s() {}

   function i() {}
   e.on("foo", o), e.on("bar", s), e.on("baz", i), t(n.listeners("foo").length).equals(1), t(n.listeners("bar").length).equals(1), t(n.listeners("baz").length).equals(1), e.remove("foo", "bar"), t(n.listeners("foo").length).equals(0), t(n.listeners("bar").length).equals(0), t(n.listeners("baz").length).equals(1)
  }), it("removes multiple listeners if first arg is seperated string", function() {
   function o() {}

   function s() {}

   function i() {}
   e.on("foo", o), e.on("bar", s), e.on("baz", i), t(n.listeners("foo").length).equals(1), t(n.listeners("bar").length).equals(1), t(n.listeners("baz").length).equals(1), e.remove("foo, bar"), t(n.listeners("foo").length).equals(0), t(n.listeners("bar").length).equals(0), t(n.listeners("baz").length).equals(1)
  })
 }), describe("#destroy", function() {
  it("removes all listeners", function() {
   function o() {}

   function s() {}

   function i() {}
   e.on("foo", o), e.on("bar", s), e.on("baz", i), t(n.listeners("foo").length).equals(1), t(n.listeners("bar").length).equals(1), t(n.listeners("baz").length).equals(1), e.destroy(), t(n.listeners("foo").length).equals(0), t(n.listeners("bar").length).equals(0), t(n.listeners("baz").length).equals(0)
  }), it("removes the .ee reference", function() {
   t(e.ee).equals(n), e.destroy(), t(e.ee).equals(null)
  }), it("returns booleans for state indication", function() {
   t(e.destroy()).is["true"](), t(e.destroy()).is["false"](), t(e.destroy()).is["false"](), t(e.destroy()).is["false"]()
  })
 })
});